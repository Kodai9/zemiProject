{"version":3,"sources":["components/Form.js","components/Sensitivity.js","components/SensitivityList.js","components/Result.js","components/Error.js","App.js","reportWebVitals.js","index.js"],"names":["Form","inputText","setInputText","setSensitivities","errMessage","setErrMessage","navigate","useNavigate","inputTextHandler","e","target","value","window","addEventListener","location","reload","className","Box","component","sx","m","width","noValidate","autoComplete","TextField","id","label","size","variant","type","onChange","error","defaultValue","helperText","Stack","Button","onClick","preventDefault","match","sens","Math","round","name","color","Sensitivity","changeTextHandler","number","SensitivityList","sensitivities","count","setCount","setChooseText","resetCount","currentTarget","baseSens","parseFloat","chooseSens","nextBaseSens","prevState","map","sensitivity","Result","chooseText","class","Error","setTimeout","App","useState","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8f54d19.chunk.js","sourcesContent":["import { useNavigate } from \"react-router-dom\";\nimport { Button } from \"@material-ui/core\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Stack from \"@mui/material/Stack\";\n\nexport const Form = ({\n  inputText,\n  setInputText,\n  setSensitivities,\n  errMessage,\n  setErrMessage,\n}) => {\n  let navigate = useNavigate();\n  const reloadTransition = () => {\n    navigate(\"/\");\n  };\n  const pageTransition = () => {\n    navigate(\"/sensitivity\");\n  };\n\n  const inputTextHandler = (e) => {\n    setInputText(e.target.value);\n  };\n\n  const submitSensitivityHandler = (e) => {\n    e.preventDefault();\n\n    const result = inputText.match(/^([1-9]\\d*|0)(\\.\\d+)?$/);\n    if (result) {\n      setSensitivities([\n        {\n          sens: Math.round(inputText * 0.5 * 100) / 100,\n          id: 0,\n          name: \"Lower_Sens\",\n        },\n        { sens: inputText, id: 1, name: \"Base_Sens\" },\n        {\n          sens: Math.round(inputText * 1.5 * 100) / 100,\n          id: 2,\n          name: \"Higher_Sens\",\n        },\n      ]);\n      pageTransition();\n    } else {\n      setErrMessage(\"error\");\n      setInputText(\"\");\n    }\n  };\n\n  // Event\n  window.addEventListener(\"popstate\", function (e) {\n    window.location.reload();\n  });\n  window.addEventListener(\"load\", function (e) {\n    reloadTransition();\n  });\n\n  return (\n    <div className=\"formWrap\">\n      <header>\n        <h1>Sensitivity Tool</h1>\n        <p>ゲーム内で使用している感度を入力して下さい</p>\n      </header>\n      <form>\n        {errMessage === \"\" ? (\n          <Box\n            className=\"textField\"\n            component=\"form\"\n            sx={{\n              \"& > :not(style)\": { m: 0, width: \"90%\" },\n            }}\n            noValidate\n            autoComplete=\"off\"\n          >\n            <TextField\n              id=\"outlined-basic\"\n              label=\"Sensitivity\"\n              size=\"small\"\n              variant=\"outlined\"\n              type=\"text\"\n              value={inputText}\n              onChange={inputTextHandler}\n            />\n          </Box>\n        ) : (\n          <Box\n            className=\"textField\"\n            component=\"form\"\n            sx={{\n              \"& .MuiTextField-root\": { m: 0, width: \"90%\" },\n            }}\n            noValidate\n            autoComplete=\"off\"\n          >\n            <TextField\n              error\n              id=\"outlined-error-helper-text\"\n              label=\"Sensitivity\"\n              defaultValue=\"\"\n              size=\"small\"\n              helperText=\"正しい数値を入力して下さい（半角数字のみ）\"\n              type=\"text\"\n              value={inputText}\n              onChange={inputTextHandler}\n            />\n          </Box>\n        )}\n        <Stack className=\"btn\">\n          <Button\n            onClick={submitSensitivityHandler}\n            type=\"submit\"\n            variant=\"outlined\"\n            size=\"small\"\n            color=\"secondary\"\n          >\n            <i>Start</i>\n          </Button>\n        </Stack>\n      </form>\n    </div>\n  );\n};\n","import { Button } from \"@material-ui/core\";\nimport Stack from \"@mui/material/Stack\";\n\nexport const Sensitivity = ({ changeTextHandler, number, name }) => {\n  return (\n    <div className=\"gridWrap\">\n      {name === \"Base_Sens\" ? (\n        <li>\n          <p className=\"sensName\">{name}</p>\n          <p className=\"sensLevel\">{number}</p>\n        </li>\n      ) : (\n        <li>\n          <p className=\"sensName\">{name}</p>\n          <p className=\"sensLevel\">{number}</p>\n          <Stack className=\"btn\">\n            <Button\n              onClick={changeTextHandler}\n              type=\"submit\"\n              value={number}\n              variant=\"outlined\"\n              size=\"small\"\n              color=\"secondary\"\n            >\n              Select\n            </Button>\n          </Stack>\n        </li>\n      )}\n    </div>\n  );\n};\n","import { useNavigate } from \"react-router-dom\";\nimport { Sensitivity } from \"./Sensitivity\";\n\nexport const SensitivityList = ({\n  inputText,\n  setInputText,\n  sensitivities,\n  setSensitivities,\n  count,\n  setCount,\n  setChooseText,\n}) => {\n  let navigate = useNavigate();\n  const reloadTransition = () => {\n    navigate(\"/\");\n  };\n  const pageTransition = () => {\n    setInputText(\"\");\n    navigate(\"/result\");\n  };\n\n  const handleClick = () => {\n    setCount((prevState) => prevState + 1);\n  };\n  const resetCount = () => {\n    setCount(1);\n    pageTransition();\n  };\n\n  const changeTextHandler = (e) => {\n    e.preventDefault();\n    setInputText(e.currentTarget.value);\n\n    const baseSens = parseFloat(inputText);\n    const chooseSens = parseFloat(e.currentTarget.value);\n    const nextBaseSens =\n      Math.round(\n        ((parseFloat(inputText) + parseFloat(e.currentTarget.value)) / 2) * 1000\n      ) / 1000;\n\n    setChooseText(nextBaseSens);\n\n    if (chooseSens < baseSens) {\n      setSensitivities([\n        { sens: chooseSens, id: 0, name: \"Lower_Sens\" },\n        { sens: nextBaseSens, id: 1, name: \"Base_Sens\" },\n        { sens: baseSens, id: 2, name: \"Higher_Sens\" },\n      ]);\n    } else {\n      setSensitivities([\n        { sens: baseSens, id: 0, name: \"Lower_Sens\" },\n        { sens: nextBaseSens, id: 1, name: \"Base_Sens\" },\n        { sens: chooseSens, id: 2, name: \"Higher_Sens\" },\n      ]);\n    }\n    setInputText(nextBaseSens);\n    count < 7 ? handleClick() : resetCount();\n  };\n\n  // Event\n  window.addEventListener(\"popstate\", function (e) {\n    window.location.reload();\n  });\n  window.addEventListener(\"load\", function (e) {\n    reloadTransition();\n  });\n\n  return (\n    <div className=\"SensitivityWrap\">\n      <header>\n        <h1>Sensitivity Tool</h1>\n        <p>選択して下さい（{count} / 7）</p>\n      </header>\n      <ul>\n        {sensitivities.map((sensitivity) => {\n          return (\n            <Sensitivity\n              number={sensitivity.sens}\n              name={sensitivity.name}\n              setInputText={setInputText}\n              changeTextHandler={changeTextHandler}\n            />\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n","import { useNavigate } from \"react-router-dom\";\nimport { Button } from \"@material-ui/core\";\nimport Stack from \"@mui/material/Stack\";\n\nexport const Result = ({ chooseText }) => {\n  let navigate = useNavigate();\n  const reloadTransition = () => {\n    navigate(\"/\");\n  };\n  const pageTransition = () => {\n    navigate(\"/\");\n  };\n\n  // Event\n  window.addEventListener(\"popstate\", function (e) {\n    window.location.reload();\n  });\n  window.addEventListener(\"load\", function (e) {\n    reloadTransition();\n  });\n\n  return (\n    <div class=\"resultWrap\">\n      <header>\n        <h1>Sensitivity Tool</h1>\n      </header>\n      <div className=\"result\">\n        <p>Best Sensitivity</p>\n        <h1>{chooseText}</h1>\n      </div>\n      <Stack className=\"btn\">\n        <Button\n          onClick={pageTransition}\n          type=\"submit\"\n          variant=\"outlined\"\n          size=\"small\"\n          color=\"secondary\"\n        >\n          Back\n        </Button>\n      </Stack>\n    </div>\n  );\n};\n","import { useNavigate } from \"react-router-dom\";\n\nexport const Error = () => {\n  let navigate = useNavigate();\n  const pageTransition = () => {\n    navigate(\"/\");\n  };\n\n  setTimeout(pageTransition, 3000);\n\n  return (\n    <div class=\"errorWrap\">\n      <h1>このページは存在しません。3秒後に最初の画面に戻ります。</h1>\n    </div>\n  );\n};\n","import { useState } from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport \"./App.css\";\n// Importing Components\nimport { Form } from \"./components/Form\";\nimport { SensitivityList } from \"./components/SensitivityList\";\nimport { Result } from \"./components/Result\";\nimport { Error } from \"./components/Error\";\n\nexport const App = () => {\n  const [inputText, setInputText] = useState(\"\");\n  const [sensitivities, setSensitivities] = useState([]);\n  const [count, setCount] = useState(1);\n  const [chooseText, setChooseText] = useState(\"\");\n  const [errMessage, setErrMessage] = useState(\"\");\n\n  return (\n    <Router>\n      <Routes>\n        <Route\n          path=\"/\"\n          element={\n            <Form\n              inputText={inputText}\n              setInputText={setInputText}\n              setSensitivities={setSensitivities}\n              errMessage={errMessage}\n              setErrMessage={setErrMessage}\n            />\n          }\n        />\n        <Route\n          path=\"/sensitivity\"\n          element={\n            <SensitivityList\n              inputText={inputText}\n              setInputText={setInputText}\n              sensitivities={sensitivities}\n              setSensitivities={setSensitivities}\n              count={count}\n              setCount={setCount}\n              chooseText={chooseText}\n              setChooseText={setChooseText}\n            />\n          }\n        />\n        <Route path=\"/result\" element={<Result chooseText={chooseText} />} />\n        <Route path=\"/*\" element={<Error />} />\n      </Routes>\n    </Router>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./assets/styles/style.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}